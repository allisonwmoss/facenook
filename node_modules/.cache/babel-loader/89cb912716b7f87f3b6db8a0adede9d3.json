{"ast":null,"code":"var _jsxFileName = \"/Users/allisonmoss/dev/facenook/facenook-app/src/components/ThumbnailsContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Thumbnail from './Thumbnail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ThumbnailsContainer(props) {\n  _s();\n\n  const allVillagersObj = props.villagers;\n  const [thumbnailVillagers, setThumbnailVillagers] = useState([]);\n\n  if (allVillagersObj) {\n    const valuesArr = Object.values(allVillagersObj);\n    useEffect(() => {\n      let newThumbnailVillagers = [];\n\n      for (let i = 0; i < 5; i++) {\n        const randomId = Math.ceil(Math.random() * 391);\n        const matchingVillager = valuesArr.find(villager => villager.id === randomId);\n        console.log(randomId);\n        console.log(matchingVillager);\n        newThumbnailVillagers.push(matchingVillager);\n      }\n\n      console.log(newThumbnailVillagers);\n      setThumbnailVillagers(newThumbnailVillagers);\n      console.log(thumbnailVillagers);\n    }, []);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this);\n  } // console.log(allVillagersObj)\n  // console.log(typeof valuesArr)\n  // console.log(valuesArr)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ThumbnailsContainer, \"p/IzGJgErkpgnwsQrSmCaePXZ6g=\");\n\n_c = ThumbnailsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThumbnailsContainer\");","map":{"version":3,"sources":["/Users/allisonmoss/dev/facenook/facenook-app/src/components/ThumbnailsContainer.js"],"names":["React","useState","useEffect","Thumbnail","ThumbnailsContainer","props","allVillagersObj","villagers","thumbnailVillagers","setThumbnailVillagers","valuesArr","Object","values","newThumbnailVillagers","i","randomId","Math","ceil","random","matchingVillager","find","villager","id","console","log","push"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,eAAe,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAC/C,QAAMC,eAAe,GAAGD,KAAK,CAACE,SAA9B;AACA,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,EAAD,CAA5D;;AACA,MAAIK,eAAJ,EAAqB;AACjB,UAAMI,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAcN,eAAd,CAAlB;AACAJ,IAAAA,SAAS,CAAC,MAAM;AACZ,UAAIW,qBAAqB,GAAG,EAA5B;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,cAAMC,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,GAA1B,CAAjB;AACA,cAAMC,gBAAgB,GAAGT,SAAS,CAACU,IAAV,CAAeC,QAAQ,IAC5CA,QAAQ,CAACC,EAAT,KAAgBP,QADK,CAAzB;AAGAQ,QAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAYL,gBAAZ;AACAN,QAAAA,qBAAqB,CAACY,IAAtB,CAA2BN,gBAA3B;AACH;;AACDI,MAAAA,OAAO,CAACC,GAAR,CAAYX,qBAAZ;AACAJ,MAAAA,qBAAqB,CAACI,qBAAD,CAArB;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYhB,kBAAZ;AACH,KAdQ,EAcN,EAdM,CAAT;AAeH,GAjBD,MAiBO;AACH,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,GAxB8C,CAyB/C;AAGA;AACA;;;AAIA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GA5CuBJ,mB;;KAAAA,mB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Thumbnail from './Thumbnail'\n\nexport default function ThumbnailsContainer(props) {\n    const allVillagersObj = props.villagers\n    const [thumbnailVillagers, setThumbnailVillagers] = useState([])\n    if (allVillagersObj) {\n        const valuesArr = Object.values(allVillagersObj)\n        useEffect(() => {\n            let newThumbnailVillagers = []\n            for (let i = 0; i < 5; i++) {\n                const randomId = Math.ceil(Math.random() * 391)\n                const matchingVillager = valuesArr.find(villager =>\n                    villager.id === randomId\n                )\n                console.log(randomId)\n                console.log(matchingVillager)\n                newThumbnailVillagers.push(matchingVillager)\n            }\n            console.log(newThumbnailVillagers)\n            setThumbnailVillagers(newThumbnailVillagers)\n            console.log(thumbnailVillagers)\n        }, [])\n    } else {\n        return (\n            <h2>loading</h2>\n        )\n    }\n    // console.log(allVillagersObj)\n\n\n    // console.log(typeof valuesArr)\n    // console.log(valuesArr)\n\n\n\n    return (\n        <div>\n            {/* {\n                villagers.map((villager, idx) => {\n                    return (\n                        <Thumbnail villager={villager} key={idx} />\n                    )\n                })\n            } */}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}